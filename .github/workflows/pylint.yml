name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 black isort bandit safety mypy pytest
        
    - name: Code formatting check with Black
      run: |
        black --check --diff .
        
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff .
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Lint with Pylint
      run: |
        pylint $(git ls-files '*.py') --exit-zero --output-format=text --reports=no --score=no
        
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
        
    - name: Security audit with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Check for known security vulnerabilities with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run tests with pytest
      run: |
        pytest --tb=short -v || echo "No tests found"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  code-analysis:
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon vulture
        pip install -r requirements.txt
        
    - name: Code complexity analysis with Radon
      run: |
        echo "=== Cyclomatic Complexity ==="
        radon cc . -a
        echo "=== Maintainability Index ==="
        radon mi . -s
        echo "=== Raw Metrics ==="
        radon raw . -s
        
    - name: Code complexity check with Xenon
      run: |
        xenon . --max-average A --max-modules B --max-absolute B
        
    - name: Dead code detection with Vulture
      run: |
        vulture . --min-confidence 80 || true
